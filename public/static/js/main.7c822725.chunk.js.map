{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Box","AppBar","position","Toolbar","component","ToggleNav","Typography","variant","path","About","Items","Home","useState","isOpen","setIsOpen","toggleDrawer","yn","e","prev","history","useHistory","navigateTo","link","push","Fragment","IconButton","edge","color","aria-label","onClick","Drawer","anchor","open","onClose","Divider","List","map","index","ListItem","button","key","ListItemText","primary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAYe,SAASA,IACtB,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,UAAWJ,KAClB,kBAACK,EAAD,MACA,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,aAKJ,kBAACP,EAAA,EAAD,KAGE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,KAAK,UACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,KACV,kBAACG,EAAD,WASd,SAASF,IACP,OACE,8BACE,sCAIN,SAASC,IACP,OACE,8BACE,sCAIN,SAASC,IACP,OACE,8BACE,qCAKN,SAASN,IAAY,IAAD,EACUO,oBAAS,GADnB,mBACXC,EADW,KACHC,EADG,KAEZC,EAAe,SAAAC,GAAE,OAAI,SAACC,GAC1BH,GAAU,SAAAI,GAAI,MAAkB,mBAAPF,EAAmBA,GAAME,OAG9CC,EAAUC,cAEVC,EAAa,SAAAC,GAAI,OAAI,SAAAL,GACzBF,GAAa,EAAbA,GACAI,EAAQI,KAAKD,EAAK,MAEpB,OACE,kBAAC,IAAME,SAAP,KACA,kBAACC,EAAA,EAAD,CAAYC,KAAK,QACfC,MAAM,UACNC,aAAW,OACXC,QAASd,KAET,kBAAC,IAAD,OAEF,kBAACe,EAAA,EAAD,CAAQC,OAAO,OACbC,KAAMnB,EACNoB,QAASlB,GAAa,IACtB,kBAACU,EAAA,EAAD,CACEI,QAASd,GAAa,IACtB,kBAAC,IAAD,OAEF,kBAACmB,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KAtBiB,CAAC,CAAC,IAAK,QAAS,CAAC,SAAU,SAAU,CAAC,SAAU,UAuBjDC,KAAI,SAACd,EAAMe,GAAP,OAChB,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNV,QAASR,EAAWC,GACpBkB,IAAKH,GAEL,kBAACI,EAAA,EAAD,CAAcC,QAASpB,EAAK,YC1FpBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c822725.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory\n} from \"react-router-dom\";\nimport {Box, AppBar, Toolbar, IconButton, Typography, Drawer, Divider, List, ListItem, ListItemText} from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\n\nexport default function App() {\n  return (\n    <Router>\n      <Box>\n        <AppBar position=\"static\">\n          <Toolbar component={Box}>\n            <ToggleNav />\n            <Typography variant=\"h6\">\n              QR Muse\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Box>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/items\">\n              <Items />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Box>\n      </Box>\n    </Router>\n  );\n}\n\nfunction About(){\n  return (\n    <main>\n      <h1>ABOUT</h1>\n    </main>\n  )\n}\nfunction Items(){\n  return (\n    <main>\n      <h1>Items</h1>\n    </main>\n  )\n}\nfunction Home(){\n  return (\n    <main>\n      <h1>Home</h1>\n    </main>\n  )\n}\n\nfunction ToggleNav(){\n  const [isOpen, setIsOpen] = useState(false)\n  const toggleDrawer = yn => (e) => {\n    setIsOpen(prev => typeof yn === 'boolean' ? yn : !prev)\n  }\n\n  const history = useHistory()\n  const itemSections = [['/', 'Home'], ['/about', 'About'], ['/items', 'Items']]\n  const navigateTo = link => e => {\n    toggleDrawer(false)()\n    history.push(link[0])\n  }\n  return (\n    <React.Fragment>\n    <IconButton edge=\"start\" \n      color=\"inherit\" \n      aria-label=\"menu\"\n      onClick={toggleDrawer()}\n    >\n      <MenuIcon />\n    </IconButton>\n    <Drawer anchor=\"left\" \n      open={isOpen} \n      onClose={toggleDrawer(false)}>\n      <IconButton \n        onClick={toggleDrawer(false)}>\n        <ChevronLeftIcon />\n      </IconButton>\n      <Divider />\n      <List>\n        {itemSections.map((link, index) => (\n          <ListItem \n            button \n            onClick={navigateTo(link)}\n            key={index}\n          >\n            <ListItemText primary={link[1]} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n    </React.Fragment>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Item.jsx","components/Items.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Item","itemId","console","log","useState","item","setItem","err","setErr","useEffect","fetch","then","res","json","catch","useStateItemById","useParams","Box","p","name","Divider","px","sections","map","idx","type","data","Fragment","key","ItemsList","items","history","useHistory","url","useRouteMatch","navigateTo","e","push","id","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","length","ListItemSecondaryAction","IconButton","onClick","edge","aria-label","Items","setItems","body","useStateAllItems","path","style","color","exact","App","AppBar","position","Toolbar","component","ToggleNav","Typography","variant","About","Home","isOpen","setIsOpen","toggleDrawer","yn","prev","link","Drawer","anchor","open","onClose","index","button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.17732fc8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Box, Divider } from '@material-ui/core'\nimport { useParams } from 'react-router-dom'\n\nexport default function Item() {\n\n    const { itemId } = useParams()\n    const [item] = useStateItemById(itemId)\n    console.log('item', item)\n    \n    return (\n        <Box p={2}>\n            <h1>\n                Item Name : {item.name}\n            </h1>\n            <Divider />\n            <Box px={2}>\n                {item && item.sections && item.sections\n                    .map(({type, data}, idx) => {\n                    return (\n                        <React.Fragment  key={idx}>\n                            <h2>\n                                section type : <b>{type}</b>\n                            </h2>\n                            <p>Some data associated with the section : {data}</p>\n                        </React.Fragment>\n                    )\n                })}\n            </Box>\n        </Box>\n    )\n}\n\n// here is an example of a react custom hook :)\nfunction useStateItemById(itemId){\n    console.log('fetch item hook')\n    const [item, setItem] = useState([])\n    const [err, setErr] = useState()\n    useEffect(() => {\n        fetch(`/api/items/${itemId}`)\n        .then(res => res.json())\n        .then(setItem)\n        .catch(setErr)\n        return function cleanup(){/* do noting for this particular hook */}\n    }, [itemId])\n    return [item, err]\n}","import React, { useState, useEffect } from 'react'\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, IconButton } from '@material-ui/core'\nimport FolderIcon from '@material-ui/icons/Folder';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { useHistory, useRouteMatch, Switch, Route } from 'react-router-dom';\nimport Item from './Item';\n\nfunction ItemsList({items}){\n    \n    const history = useHistory()\n    const { url } = useRouteMatch();\n    const navigateTo = item => e => {\n        history.push(`${url}/${item.id}`)\n    }\n\n    return (\n        <List>\n            {items.map((item, idx) => (\n                <ListItem key={idx}>\n                    <ListItemAvatar>\n                        <Avatar>\n                        <FolderIcon />\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                        primary={item.name}\n                        secondary={`This item has ${item.sections.length} section(s)`}\n                    />\n                    <ListItemSecondaryAction>\n                        <IconButton \n                            onClick={navigateTo(item)}\n                            edge=\"end\" aria-label=\"delete\"\n                        >\n                            <ChevronRightIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    )\n}\n\nexport default function Items() {\n    const [items, err] = useStateAllItems() /* defined below, you'd want it in a separate file */\n    \n    const { path } = useRouteMatch();\n\n    // render an error message if err\n    // note that because this component is basically just a function, \n    // we could also use try/catch and render on error thrown pretty cool\n    if(err) return (<h1 style={{color: 'red'}}>an error </h1>)\n    \n    return items.length > 0\n        ? (\n            <Switch>\n                <Route exact path={path}>\n                    <ItemsList items={items} />\n                </Route>\n                <Route path={`${path}/:itemId`}>\n                    <Item />\n                </Route>\n            </Switch>\n        )\n        : <h1>THERE ARE NO ITEMS TO DISPLAY</h1>\n}\n\n// here is an example of a react custom hook :)\nfunction useStateAllItems(){\n    console.log('fetch items hook')\n    const [items, setItems] = useState([])\n    const [err, setErr] = useState()\n    useEffect(() => {\n        fetch('/api/items')\n        .then(res => res.json())\n        .then(body => {\n            console.log('body.items', body.items)\n            setItems(body.items)\n        })\n        .catch(setErr)\n        return function cleanup(){/* do noting for this particular hook */}\n    }, [])\n    return [items, err]\n}","import React, { useState } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory\n} from \"react-router-dom\";\nimport {Box, AppBar, Toolbar, IconButton, Typography, Drawer, Divider, List, ListItem, ListItemText} from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Items from './components/Items';\n\nexport default function App() {\n  return (\n    <Router>\n      <Box>\n        <AppBar position=\"static\">\n          <Toolbar component={Box}>\n            <ToggleNav />\n            <Typography variant=\"h6\">\n              QR Muse\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Box>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/items\">\n              <Items />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Box>\n      </Box>\n    </Router>\n  );\n}\n\nfunction ToggleNav(){\n  const [isOpen, setIsOpen] = useState(false)\n  const toggleDrawer = yn => (e) => {\n    setIsOpen(prev => typeof yn === 'boolean' ? yn : !prev)\n  }\n\n  const history = useHistory()\n  const itemSections = [['/', 'Home'], ['/about', 'About'], ['/items', 'Items']]\n  const navigateTo = link => e => {\n    toggleDrawer(false)()\n    history.push(link[0])\n  }\n  return (\n    <React.Fragment>\n    <IconButton edge=\"start\" \n      color=\"inherit\" \n      aria-label=\"menu\"\n      onClick={toggleDrawer()}\n    >\n      <MenuIcon />\n    </IconButton>\n    <Drawer anchor=\"left\" \n      open={isOpen} \n      onClose={toggleDrawer(false)}>\n      <IconButton \n        onClick={toggleDrawer(false)}>\n        <ChevronLeftIcon />\n      </IconButton>\n      <Divider />\n      <List>\n        {itemSections.map((link, index) => (\n          <ListItem \n            button \n            onClick={navigateTo(link)}\n            key={index}\n          >\n            <ListItemText primary={link[1]} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n    </React.Fragment>\n  )\n}\n\nfunction About(){\n  return (\n    <main>\n      <h1>ABOUT</h1>\n    </main>\n  )\n}\n\nfunction Home(){\n  return (\n    <main>\n      <h1>Home</h1>\n    </main>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}